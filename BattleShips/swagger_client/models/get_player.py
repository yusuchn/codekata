# coding: utf-8

"""
    Battleships API

    The API for Battleships  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetPlayer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'won': 'int',
        'lost': 'int',
        'games': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'won': 'won',
        'lost': 'lost',
        'games': 'games'
    }

    def __init__(self, name=None, won=None, lost=None, games=None):  # noqa: E501
        """GetPlayer - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._won = None
        self._lost = None
        self._games = None
        self.discriminator = None

        self.name = name
        self.won = won
        self.lost = lost
        self.games = games

    @property
    def name(self):
        """Gets the name of this GetPlayer.  # noqa: E501

        Name of player  # noqa: E501

        :return: The name of this GetPlayer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetPlayer.

        Name of player  # noqa: E501

        :param name: The name of this GetPlayer.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def won(self):
        """Gets the won of this GetPlayer.  # noqa: E501

        The count of games this player has won  # noqa: E501

        :return: The won of this GetPlayer.  # noqa: E501
        :rtype: int
        """
        return self._won

    @won.setter
    def won(self, won):
        """Sets the won of this GetPlayer.

        The count of games this player has won  # noqa: E501

        :param won: The won of this GetPlayer.  # noqa: E501
        :type: int
        """
        if won is None:
            raise ValueError("Invalid value for `won`, must not be `None`")  # noqa: E501

        self._won = won

    @property
    def lost(self):
        """Gets the lost of this GetPlayer.  # noqa: E501

        The count of games this player has lost  # noqa: E501

        :return: The lost of this GetPlayer.  # noqa: E501
        :rtype: int
        """
        return self._lost

    @lost.setter
    def lost(self, lost):
        """Sets the lost of this GetPlayer.

        The count of games this player has lost  # noqa: E501

        :param lost: The lost of this GetPlayer.  # noqa: E501
        :type: int
        """
        if lost is None:
            raise ValueError("Invalid value for `lost`, must not be `None`")  # noqa: E501

        self._lost = lost

    @property
    def games(self):
        """Gets the games of this GetPlayer.  # noqa: E501

        List of active game ids that this player is involved in  # noqa: E501

        :return: The games of this GetPlayer.  # noqa: E501
        :rtype: list[str]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this GetPlayer.

        List of active game ids that this player is involved in  # noqa: E501

        :param games: The games of this GetPlayer.  # noqa: E501
        :type: list[str]
        """
        if games is None:
            raise ValueError("Invalid value for `games`, must not be `None`")  # noqa: E501

        self._games = games

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPlayer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPlayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
