# coding: utf-8

"""
    Battleships API

    The API for Battleships  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetGame(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'player1': 'Player',
        'player2': 'Player',
        'move': 'str',
        'winner': 'str',
        'fleet': 'list[Ship]'
    }

    attribute_map = {
        'player1': 'player1',
        'player2': 'player2',
        'move': 'move',
        'winner': 'winner',
        'fleet': 'fleet'
    }

    def __init__(self, player1=None, player2=None, move=None, winner=None, fleet=None):  # noqa: E501
        """GetGame - a model defined in Swagger"""  # noqa: E501

        self._player1 = None
        self._player2 = None
        self._move = None
        self._winner = None
        self._fleet = None
        self.discriminator = None

        self.player1 = player1
        self.player2 = player2
        self.move = move
        self.winner = winner
        self.fleet = fleet

    @property
    def player1(self):
        """Gets the player1 of this GetGame.  # noqa: E501


        :return: The player1 of this GetGame.  # noqa: E501
        :rtype: Player
        """
        return self._player1

    @player1.setter
    def player1(self, player1):
        """Sets the player1 of this GetGame.


        :param player1: The player1 of this GetGame.  # noqa: E501
        :type: Player
        """
        if player1 is None:
            raise ValueError("Invalid value for `player1`, must not be `None`")  # noqa: E501

        self._player1 = player1

    @property
    def player2(self):
        """Gets the player2 of this GetGame.  # noqa: E501


        :return: The player2 of this GetGame.  # noqa: E501
        :rtype: Player
        """
        return self._player2

    @player2.setter
    def player2(self, player2):
        """Sets the player2 of this GetGame.


        :param player2: The player2 of this GetGame.  # noqa: E501
        :type: Player
        """
        if player2 is None:
            raise ValueError("Invalid value for `player2`, must not be `None`")  # noqa: E501

        self._player2 = player2

    @property
    def move(self):
        """Gets the move of this GetGame.  # noqa: E501

        Name of player whose turn it is to make a move, or an empty string if the game is over  # noqa: E501

        :return: The move of this GetGame.  # noqa: E501
        :rtype: str
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this GetGame.

        Name of player whose turn it is to make a move, or an empty string if the game is over  # noqa: E501

        :param move: The move of this GetGame.  # noqa: E501
        :type: str
        """
        if move is None:
            raise ValueError("Invalid value for `move`, must not be `None`")  # noqa: E501

        self._move = move

    @property
    def winner(self):
        """Gets the winner of this GetGame.  # noqa: E501

        Name of player who has won, or an empty string if no winner yet  # noqa: E501

        :return: The winner of this GetGame.  # noqa: E501
        :rtype: str
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this GetGame.

        Name of player who has won, or an empty string if no winner yet  # noqa: E501

        :param winner: The winner of this GetGame.  # noqa: E501
        :type: str
        """
        if winner is None:
            raise ValueError("Invalid value for `winner`, must not be `None`")  # noqa: E501

        self._winner = winner

    @property
    def fleet(self):
        """Gets the fleet of this GetGame.  # noqa: E501

        The ships that are allocated to each player in the game  # noqa: E501

        :return: The fleet of this GetGame.  # noqa: E501
        :rtype: list[Ship]
        """
        return self._fleet

    @fleet.setter
    def fleet(self, fleet):
        """Sets the fleet of this GetGame.

        The ships that are allocated to each player in the game  # noqa: E501

        :param fleet: The fleet of this GetGame.  # noqa: E501
        :type: list[Ship]
        """
        if fleet is None:
            raise ValueError("Invalid value for `fleet`, must not be `None`")  # noqa: E501

        self._fleet = fleet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetGame, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetGame):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
