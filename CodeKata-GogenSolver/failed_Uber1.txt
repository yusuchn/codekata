gogen files are: {'grid_file': 'C:/Users/ysu1/PycharmProjects/CodeKata-GogenSolver/games/B1/Uber1/grid.txt', 'wordlist_file': 'C:/Users/ysu1/PycharmProjects/CodeKata-GogenSolver/games/B1/Uber1/words.txt'}
function: load_data
Opening C:/Users/ysu1/PycharmProjects/CodeKata-GogenSolver/games/B1/Uber1/words.txt
words = ['BUILT', 'DEW', 'FOH', 'GEM', 'JAG', 'KILN', 'LOX', 'ORCS', 'ROQUE', 'UIT', 'VIM', 'YAH']
function: get_adjacencies
Exit get_adjacencies function
Opening C:/Users/ysu1/PycharmProjects/CodeKata-GogenSolver/games/B1/Uber1/grid.txt
function: get_fixed_letters
Exit get_fixed_letters function
function: get_floating_letters
Exit get_floating_letters function
fixed_letters = {'P': {(0, 0)}, 'L': {(2, 0)}, 'F': {(4, 0)}, 'K': {(0, 2)}, 'M': {(2, 2)}, 'R': {(4, 2)}, 'D': {(0, 4)}, 'J': {(2, 4)}, 'S': {(4, 4)}}, 
floating_letters = {'A': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'B': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'C': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'E': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'G': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'H': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'I': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'N': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'O': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'Q': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'T': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'U': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'V': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'W': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'X': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'Y': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}}
Exit load_data function
positions = {'P': {(0, 0)}, 'L': {(2, 0)}, 'F': {(4, 0)}, 'K': {(0, 2)}, 'M': {(2, 2)}, 'R': {(4, 2)}, 'D': {(0, 4)}, 'J': {(2, 4)}, 'S': {(4, 4)}, 'A': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'B': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'C': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'E': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'G': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'H': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'I': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'N': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'O': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'Q': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'T': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'U': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'V': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'W': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'X': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}, 'Y': {(1, 2), (0, 1), (3, 2), (1, 3), (3, 3), (3, 0), (1, 0), (3, 1), (2, 1), (1, 4), (2, 3), (4, 3), (3, 4), (0, 3), (4, 1), (1, 1)}}
adjacencies = {'A': ['J', 'G', 'Y', 'H'], 'B': ['U'], 'C': ['R', 'S'], 'D': ['E'], 'E': ['D', 'W', 'G', 'M', 'U'], 'F': ['O'], 'G': ['E', 'A'], 'H': ['O', 'A'], 'I': ['U', 'L', 'K', 'L', 'U', 'T', 'V', 'M'], 'J': ['A'], 'K': ['I'], 'L': ['I', 'T', 'I', 'N', 'O'], 'M': ['E', 'I'], 'N': ['L'], 'O': ['F', 'H', 'L', 'X', 'R', 'R', 'Q'], 'P': [], 'Q': ['O', 'U'], 'R': ['O', 'C', 'O'], 'S': ['C'], 'T': ['L', 'I'], 'U': ['B', 'I', 'Q', 'E', 'I'], 'V': ['I'], 'W': ['E'], 'X': ['O'], 'Y': ['A']}
function: get_grid
Exit get_grid function
positions_grid = [['P', '-', 'L', '-', 'F'], ['-', '-', '-', '-', '-'], ['K', '-', 'M', '-', 'R'], ['-', '-', '-', '-', '-'], ['D', '-', 'J', '-', 'S']]
function: draw_grid
Exit draw_grid function
function: find_solution

Process finished with exit code -1
